# ######################################################################
#
# SMNG's BASIC (BLAB And SMAC Intro to Computing) series
# Worksheet for March 4, 2020
# 
# - Skills introduced: 
# --- Vi basics
# ------ Creating and editing text files
# --- Github basics
# ------ Cloning a repository
# ------ Git add, commit, push
# ------ Basic git etiquette
#
# Presented by Sarah Bakst and Robin Karlin
# 
# ######################################################################

# BASIC GIT ETIQUETTE

# a. In SMNG we keep all our experiment code in a git repository ("repo"). Github is a way of sharing your code with other people. There is a "master" version hosted by Git, as well as your own local version ("head"), located on your computer. This way, you can make some changes to code without everybody immediately being affected; the changes that you make on your local machine have to be "pushed" into the master in order for it to be accessible to others. (This is different from keeping things on a server that is directly accessed by multiple computers, like how we store our data.) 

# b. Etiquette comes into play because it may be the case that multiple people are working on the same bit of code. For example: 
# --- I've written the function gen_ostUserEvents_timeAdapt, and pushed it to the master repo. Chris is using it and notices a bug: 

# expt.name = 'tmieAdapt'; --> should be expt.name = 'timeAdapt'; 

# He fixes it and saves it to his computer, and pushes the fixed version to the master. The next day, I come in and immediately start using the script, but without checking if there's a new version on the master repo. As I'm using the script, I notice another bug: 

# dummyWord = 'caper'; ---> should be dummyWord = 'capper'; 

# I fix this and save it to my computer. Then I try to push it to the master repo, but there's a problem! When Git compares the master version to my version, it notices that it is different in more places than what I just fixed. This is called a "conflict". This conflict can be avoided by practicing good Git etiquette (getiquette!). 

# c. Best practices: 
# 1. When you sit down to work on something, first check if there are any updates to the master (bad Robin!). Git commands are prefaced with "git": 
git status # tells you if you are ahead or behind by certain commits, and if you have any files hanging out waiting to be committed

# 2. Sometimes git status won't actually do a new lookup, and you have to force it to ACTUALLY check if there have been any changes: 
git fetch # forces it to "go out to the mailbox" 
git status # report back what it just found

# (You can also string these two commands together: git fetch && git status) 

# 3. If you are "behind" by commits, pull the new commits into your local version
git pull 
# Since we already asked you to do a pull at the beginning of class, you probably won't have anything new now. 

# 4. When you are done working for the day, do another check for changes to the master, and then push your changes (we will do the actual commands for this later). 

# Getiquette is especially important if you know you are working on something that other people may also be working on. 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# INTRO TO VI
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 1. Last week, we created directories with the command mkdir. You should still have an extra directory in your comppedagogy folder that is something like RobinsDirectory. If you don't, create one!  
mkdir RobinsDirectory

# 2. Now we are going to create a new text file without ever leaving the command line! We are going to use a program called vi. It's best to think of this program as one where you are telling someone else to do the writing for you, like "now we are going to write some text! Now we are going to save! Now we are going to write some text again!" Once you are familiar with the program, you'll see how it can be a convenient tool that avoids some weird things like ghost characters that notepad or other programs can introduce. Anyway, end vi talk.

# vi myfirstvi_yourlastname.txt
# so for example

vi myfirstvi_Bakst.txt
vi myfirstvi_Karlin.txt

# When you first open up vi, you are in command mode. That is, vi accepts commands, which are combinations of characters.
# Now type the letter i, which will take you into "insert" mode; now vi will know that the keys you are typing are intended to create text in your document rather than send commands to the program.
# you'll see --INSERT-- appear at the bottom left corner of the window. I am currently writing this in vi, so that is what I see at the bottom left corner of my own terminal window. 
# Type whatever you want, eg "vi is the best!" 
# When you are done typing, press esc.
# To save, type :w (the colon is important, as is the lowercase w) and press enter.
# To quit, type :q (again, colon and lowercase q are important). Press enter.
# The file has gone away! But where am I? 
# Check where you are...
# Did I create a new file?
# Check the contents of the current directory.

# Application check: how would you move this file to be inside your directory, instead of in comppedagogy? (You should do this!) 
mv myfirstvi_Karlin.txt RobinsDirectory/myfirstvi_Karlin.txt

# 3. Awesome, you created a file where you wanted it! Now suppose you want to track changes to this file and make sure that this version appears on the computer of everyone who wants to have access to everything in the repository. Github needs to track the file, and to do that, it needs to know the existence of it.

git add RobinsDirectory/myfirstvi_NAME.txt # instead of NAME, your last name of course.
# alternatively, try tab completion.

# 6. Now you have added the file to a list of changes to be tracked by git. But now you need to "commit" your change, or get it ready to send off to the repository. You must also add a message (with the -m "flag") saying what new changes there are to the file. This is important for tracking changes to the file over time.

git commit -m 'created my first file in vi' # you must use quotes around your message (in git bash you can also use double quotes, "created my first file"). Don't use an apostrophe in the message itself. 

# 7. Ok, time to send off your changes! A "push" takes whatever is in your own local version of the repository and essentially overwrites what's in the repository online. That means it's good practice to make sure your version is totally up-to-date with whatever is online. For example, if you and your co-author are both editing the same file at the same time and one of you pushes your changes and then the other does, one person's changes could get overwritten. For us right now, this shouldn't matter because we are all working on unique files, but this is a very good habit to be in. So first:

git pull # bring in changes from the repository. Normally this will not cause any problems.

# then

git push

# 8. Now try making changes to your textfile. Follow the commands in steps 4-7. The steps remain the same even though that file already exists. Remember to type "i" to "insert" text! You can also try deleting some text and then pushing those changes.

# 9. After you have toyed around editing and pushing, go to https://github.com/sbakst/comppedagogy. Do you see the commit messages in the second column? Try clicking on one and see how github represents the commit history.


### MORE FUN WITH VI ###
Excited about vi? See more on basic commands here: https://www.cs.colostate.edu/helpdocs/vi.html and some fancier things here: https://www.ccsf.edu/Pub/Fac/vi.html
