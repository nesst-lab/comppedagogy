a = 2; 
b = -1; 
if a>0 & b>0
    fprintf('hello world\n')
end
if round(a) == a & round(b) == b
    fprintf('hello world\n')
end
if a ~= 0 & b~= 0
    fprintf('hello world\n')
end
if ~isempty(a) & ~isempty(b)
    fprintf('hello world\n')
end
%2
if a>0 | b>0
    fprintf('hello world\n')
end

if round(a) == a | round(b) == b
    fprintf('hello world\n')
end

if a ~= 0 | b~= 0
    fprintf('hello world\n')
end

if ~isempty(a) | ~isempty(b)
    fprintf('hello world\n')
end
%3
 if xor(a>0,b>0)
fprintf('hello world\n')
end

if xor(isempty(a), ~isempty(b))
    fprintf('hello world\n')
end

%4
a & b & c % false
a & b | c % true
a | b & c % true 

a | (b & c) %3rd expression equivalent to this one

%Short-circuiting

if a < 0 && b > 0 % if a is negative, then check if b is positive, and if b is positive, 
	fprintf('hello world!\n') % then print hello world!
end 

No there is not a short circuit for xor since you have to evaluate both statements for an "or" problem. 

% Would it be okay to write the statement as follows? Why or why not? 

if isempty(dataPath) || nargin < 1, dataPath = cd; end

No because we have 0 args so you would be trying to find a variable that doesnt exist

% nargin is the number of arguments that the function received. What would a call to audioGUI look like with 0
% arguments? And with an empty argument in place of dataPath?

audioGUI() 

audioGUI([])

%Homework 6

No because one of the arguments are empty which means a variable doesnt exist.

%Homework 7
You would get an error since the greeting variable was cleared

%Homework 8

Switch case is good for small sets. "If you have multiple cases that would result in the same process, you can combine them (much like an "or"
% in an if/else)"

if strcmp(condWord, 'capper') || strcmp(condWord, 'gapper') 
    max_events = 7; 
elseif strcmp(condWord, 'sapper') || strcmp(condWord, 'zapper') 
    max_events = 6; 
elseif strcmp(condWord, 'sea') || strcmp(condWord, 'C') || strcmp(condWord, 'Z') || strcmp(condWord, 'czar') ...
        || strcmp(condWord, 'gar') || strcmp(condWord, 'cod') || strcmp(condWord, 'god')
    max_events = 5; 
else 
    max_events = NaN; % not strictly necessary but will prevent erroring in print statement
end

switch name
    case 'sarah'
        almaMater = 'UC Berkeley'; 
    case 'robin'
        almaMater = 'Cornell University'; 
    otherwise 
        almaMater = '???'; % same re: obligatoriness of otherwise 
end

Yes you can change else to be otherwise.
